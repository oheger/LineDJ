/*
 * Copyright 2015-2018 The Developers Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.oliver_heger.linedj.shared.archive.metadata

import de.oliver_heger.linedj.shared.archive.media.MediumID

/**
  * A trait defining a hierarchy of events related to the state of the meta
  * data management (aka the media archive).
  *
  * The meta data manager actor generates a number of events when there are
  * important changes in the state of the archive, e.g. when a new scan
  * operation starts, a scan operation completes, the meta data of a medium
  * has been completely retrieved, etc. This can be used by applications to
  * track the state of the archive; it is also possible to show interesting
  * statistics about the archive, for instance in an admin application.
  *
  * All events generated by the meta data manager are subclasses of this trait.
  */
sealed trait MetaDataStateEvent

/**
  * A meta data state event indicating the start of a media scan operation.
  *
  * During the scan, further events may be produced that report the progress of
  * the operation.
  */
case object MetaDataScanStarted extends MetaDataStateEvent

/**
  * A meta data state event indicating the completion of a media scan
  * operation.
  *
  * This is the last event generated for a scan. Afterwards no more data is
  * going to become available.
  */
case object MetaDataScanCompleted extends MetaDataStateEvent

/**
  * A meta data state event indicating that now updates of the meta data in
  * the archive are in progress.
  *
  * This event can wrap multiple scan operations (reported by a series of
  * [[MetaDataScanStarted]] and [[MetaDataScanCompleted]] events). An archive
  * component that is going to add meta data to the archive typically triggers
  * multiple scan operations yielding partial results. Event listeners not
  * interested in those partial results can focus on this event (and its
  * counterpart) to only get notified at the very beginning and the end of the
  * operation.
  */
case object MetaDataUpdateInProgress extends MetaDataStateEvent

/**
  * A meta data state event indicating that now all updates of meta data in
  * the archive are done.
  *
  * This event corresponds to [[MetaDataUpdateInProgress]] and reports the
  * end of an operation that updates meta data in the archive.
  */
case object MetaDataUpdateCompleted extends MetaDataStateEvent

/**
  * A meta data state event indicating that a scan operation has been
  * canceled.
  *
  * This event is generated as soon as the cancel command arrives. The scan
  * operation does not terminate immediately, but may need some more time to
  * shutdown gracefully. Finally, a [[MetaDataScanCompleted]] event is fired.
  */
case object MetaDataScanCanceled extends MetaDataStateEvent

/**
  * A meta data state event notifying listeners that the full meta data for a
  * medium is now available.
  *
  * Events of this type are of interest for applications that track whole
  * media. Registered state listeners are passed this event whenever all meta
  * data for a medium has been extracted. After receiving this message, the
  * meta data can be requested in a second step. This is more efficient than
  * receiving chunks for updates.
  *
  * During a single meta data extraction operation that is not canceled a
  * message of this type is produced once for each medium discovered.
  *
  * @param mediumID the ID of the medium that has been completed
  */
case class MediumMetaDataCompleted(mediumID: MediumID) extends MetaDataStateEvent

/**
  * A data class defining the current state of the media archive.
  *
  * When a meta data state listener registers at the archive it automatically
  * receives a message of this type describing the current state of the
  * archive. During a scan operation, further events of this type are
  * produced from time to time. This gives applications a chance to monitor
  * progress and display statistical information.
  *
  * @param mediaCount       the current number of media in the archive
  * @param songCount        the current number of songs
  * @param size             the total size of all audio files (in bytes)
  * @param duration         the total duration of all audio files (in
  *                         milliseconds)
  * @param scanInProgress   a flag whether currently a scan is in progress
  * @param updateInProgress a flag whether currently an update operation is in
  *                         progress (which can consist of multiple scans)
  */
case class MetaDataState(mediaCount: Int, songCount: Int, size: Long, duration: Long,
                         scanInProgress: Boolean, updateInProgress: Boolean) {
  /**
    * Returns a new ''MetaDataState'' object which represents the sum of this
    * object and the specified meta data. This is useful to calculate
    * statistics over multiple files on a medium or even over multiple media.
    * The properties of the specified ''MediaMetaData'' are added to the
    * properties of this object; other properties (e.g. the ''mediaCount''
    * or the ''scanInProgress'' state) are not modified.
    *
    * @param data the meta data to be added to this instance
    * @return the updated ''MetaDataState''
    */
  def +(data: MediaMetaData): MetaDataState =
    copy(songCount = songCount + 1, size = size + data.size,
      duration = duration + data.duration.getOrElse(0))
}

/**
  * A meta data state event propagating statistics about the media archive to
  * registered listeners.
  *
  * Events of this type are generated from time to time during a scan
  * operation, so that listeners can keep track on the progress. Such an event
  * is also delivered to a newly registered state listener, so that it can be
  * sure to operate on up-to-date data.
  *
  * @param state the current state of the media archive
  */
case class MetaDataStateUpdated(state: MetaDataState) extends MetaDataStateEvent
