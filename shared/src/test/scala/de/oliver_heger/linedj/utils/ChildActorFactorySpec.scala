package de.oliver_heger.linedj.utils

import akka.actor.{Actor, ActorRef, ActorSystem, Props}
import akka.testkit.{ImplicitSender, TestKit}
import de.oliver_heger.linedj.utils.ChildActorFactorySpec.{TestRequest, TestResponse}
import org.scalatest.BeforeAndAfterAll
import org.scalatest.flatspec.AnyFlatSpecLike
import org.scalatest.matchers.should.Matchers

object ChildActorFactorySpec {

  /**
    * A test message class processed by the test actors.
    *
    * @param data test data
    */
  case class TestRequest(data: Int)

  /**
    * A test response message class generated by the test actors.
    *
    * @param request the original request
    * @param source  the sender of this response (the child actor)
    */
  case class TestResponse(request: TestRequest, source: ActorRef)

}

/**
  * Test class for ''ChildActorFactory''.
  *
  * This test class implements a real-life test: An actor is created of a class
  * which makes use of child actors. It is checked whether communication with
  * the child actor works as expected.
  */
class ChildActorFactorySpec(testSystem: ActorSystem) extends TestKit(testSystem) with ImplicitSender
  with AnyFlatSpecLike with Matchers with BeforeAndAfterAll {
  def this() = this(ActorSystem("ChildActorFactorySpec"))

  override protected def afterAll(): Unit = {
    TestKit shutdownActorSystem system
  }

  "A ChildActorFactory" should "create a correct child actor" in {
    val msg = TestRequest(42)
    val actor = system.actorOf(Props(new ActorWithChild with ChildActorFactory))

    actor ! msg
    val response = expectMsgType[TestResponse]
    response.request should be(msg)
  }

  it should "generate an actor name" in {
    val actor1, actor2 = system.actorOf(Props(new ActorWithChild with ChildActorFactory))

    List(actor1, actor2) foreach { actor =>
      actor ! TestRequest(1)
      val response = expectMsgType[TestResponse]
      response.source.path.elements.last should startWith("SomeChildActor")
    }
  }
}

/**
  * A test actor class that creates a child actor.
  */
class ActorWithChild extends Actor {
  this: ChildActorFactory =>

  /** The child actor. */
  private var child: ActorRef = _

  /** The sending actor. */
  private var client: ActorRef = _

  override def preStart(): Unit = {
    child = createChildActor(Props[SomeChildActor]())
  }

  override def receive: Receive = {
    case r: TestRequest =>
      child ! r
      client = sender()

    case resp: TestResponse =>
      client ! resp
  }
}

/**
  * A test child actor. This actor just wraps an incoming test message into a
  * reply and sends this reply back to the sender.
  */
class SomeChildActor extends Actor {
  override def receive: Receive = {
    case r: TestRequest =>
      sender() ! TestResponse(r, self)
  }
}
