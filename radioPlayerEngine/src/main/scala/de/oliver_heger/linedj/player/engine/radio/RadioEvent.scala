/*
 * Copyright 2015-2023 The Developers Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.oliver_heger.linedj.player.engine.radio

import de.oliver_heger.linedj.player.engine.radio.CurrentMetadata.extractStreamTitle

import java.time.LocalDateTime
import scala.concurrent.duration.FiniteDuration

/**
  * The base trait for all events generated by the radio player engine.
  *
  * Events can be used to keep track of the state of the radio player engine,
  * e.g. when playback of a new radio source starts or a replacement source
  * is enabled temporarily.
  */
sealed trait RadioEvent {
  /** The time when this event was generated. */
  val time: LocalDateTime
}

/**
  * A radio player event indicating that playback of a specific [[RadioSource]]
  * has started.
  *
  * Events of this type are generated by the radio source actor when a source
  * is about to be played. This can mean that playback starts anew or that it
  * switches to another radio source.
  *
  * ''Notes'':
  *  - There is only a change event and not a pair of started/finished events.
  *    The end of a radio source is typically less important. It can be
  *    determined implicitly when the next change event arrives or a
  *    [[RadioPlaybackStoppedEvent]] event, in case that the player was
  *    stopped.
  *  - This event is generated each time playback of a new radio source starts;
  *    this can be the selected source or a replacement source.
  *
  * @param source the radio source that becomes the current source
  * @param time   the time when this event was generated
  */
case class RadioSourceChangedEvent(source: RadioSource,
                                   override val time: LocalDateTime = LocalDateTime.now())
  extends RadioEvent

/**
  * A radio player event indicating that the user has selected another
  * [[RadioSource]]. If possible, playback starts with this new radio source.
  * Otherwise, a replacement source is searched, which will trigger a
  * [[RadioSourceReplacementStartEvent]].
  *
  * @param source the new selected radio source
  * @param time   the time when this event was generated
  */
case class RadioSourceSelectedEvent(source: RadioSource,
                                    override val time: LocalDateTime = LocalDateTime.now())
  extends RadioEvent

/**
  * A radio player event indicating that radio playback has stopped (on request
  * of the user).
  *
  * This event is generated after the ''stopPlayback()'' method of the radio
  * player has been called (and playback was active before). The event contains
  * the last radio source that has been played. When playback is started again,
  * a [[RadioSourceChangedEvent]] is generated.
  *
  * @param source the last [[RadioSource]] that has been played
  * @param time   the time when the event was generated
  */
case class RadioPlaybackStoppedEvent(source: RadioSource,
                                     override val time: LocalDateTime = LocalDateTime.now())
  extends RadioEvent

/**
  * A radio player event indicating that radio playback has switched to a
  * replacement source.
  *
  * Events of this type are generated when the radio source selected by the
  * user has been temporary disabled for some reason (a playback error
  * occurred, a defined exclusion interval is reached, a metadata exclusion has
  * been detected). The player engine then selects a replacement source
  * automatically and switches to it temporarily. Both sources affected are
  * available from the event.
  *
  * @param source            the current source selected by the user
  * @param replacementSource the replacement source
  * @param time              the time when this event was generated
  */
case class RadioSourceReplacementStartEvent(source: RadioSource,
                                            replacementSource: RadioSource,
                                            override val time: LocalDateTime = LocalDateTime.now())
  extends RadioEvent

/**
  * A radio player event indicating that playback switched from a replacement
  * source back to the original radio source.
  *
  * The player engine checks periodically whether exclusion criteria detected
  * for a radio source are still valid. If this is not the case, the source is
  * enabled again. If this happens for the source selected by the user,
  * playback of this source starts immediately, and this event is fired.
  *
  * @param source the original source to be played
  * @param time   the time when this event was generated
  */
case class RadioSourceReplacementEndEvent(source: RadioSource,
                                          override val time: LocalDateTime = LocalDateTime.now())
  extends RadioEvent

/**
  * A radio player event indicating that an error occurred when playing the
  * current radio source.
  *
  * This radio source will be disabled, and the player engine searches a
  * replacement source for it. This will typically generate a follow-up event.
  *
  * @param source the affected radio source
  * @param time   the time when this event was generated
  */
case class RadioSourceErrorEvent(source: RadioSource,
                                 override val time: LocalDateTime = LocalDateTime.now())
  extends RadioEvent

/**
  * A radio player event indicating a progress during playback.
  *
  * Events of this type are generated in regular intervals. They can be used
  * for instance to display playback time or other statistics.
  *
  * @param source         the current radio source
  * @param bytesProcessed the number of bytes processed for the current source
  * @param playbackTime   the accumulated playback duration
  * @param time           the time when this event was generated
  */
case class RadioPlaybackProgressEvent(source: RadioSource,
                                      bytesProcessed: Long,
                                      playbackTime: FiniteDuration,
                                      override val time: LocalDateTime = LocalDateTime.now()) extends RadioEvent

/**
  * A radio player event indicating a failure when creating the playback
  * context for the current radio source.
  *
  * This typically means that the audio format of the radio stream is not
  * supported. The source is disabled, and the player engine selects a
  * replacement source. This will typically generate a follow-up event.
  *
  * @param source the current radio source
  * @param time   the time when this event was generated
  */
case class RadioPlaybackContextCreationFailedEvent(source: RadioSource,
                                                   override val time: LocalDateTime = LocalDateTime.now())
  extends RadioEvent

/**
  * A radio player event indicating an error during playback.
  *
  * This typically indicates a problem with the input stream read by the radio
  * player. The source is disabled, and the player engine selects a
  * replacement source. This will typically generate a follow-up event.
  *
  * @param source the current radio source
  * @param time   the time when this event was generated
  */
case class RadioPlaybackErrorEvent(source: RadioSource,
                                   override val time: LocalDateTime = LocalDateTime.now()) extends RadioEvent

/**
  * A trait to represent metadata extracted from a radio stream.
  *
  * A subclass of this trait is contained in a [[RadioMetadataEvent]]. The
  * different classes are used to distinguish between actual metadata and the
  * state that a specific stream does not support metadata.
  */
sealed trait RadioMetadata

/**
  * A concrete subtype of radio metadata indicating that the current radio
  * source does not support metadata.
  */
case object MetadataNotSupported extends RadioMetadata

object CurrentMetadata {
  /** Regular expression to extract the StreamTitle field from metadata. */
  private val RegStreamTitle = "StreamTitle='(.*?)';".r

  /**
    * Tries to extract the ''StreamTitle'' field from the given metadata
    * string.
    *
    * @param data the metadata
    * @return an ''Option'' with the extracted ''StreamTitle'' field
    */
  private def extractStreamTitle(data: String): Option[String] =
    RegStreamTitle.findFirstMatchIn(data).map(_.group(1))
}

/**
  * A concrete subtype of radio metadata containing actual metadata about what
  * is currently. This could be for instance information about the current
  * song.
  *
  * @param data the full content of the metadata
  */
case class CurrentMetadata(data: String) extends RadioMetadata {
  /**
    * Tries to parse the information about the current title (i.e. the
    * ''StreamTitle'' field from the metadata. If it is found, the content of
    * this field is returned. Otherwise, this function returns the full
    * metadata content.
    *
    * @return the title part of the metadata
    */
  def title: String = extractStreamTitle(data) getOrElse data
}

/**
  * A radio player event indicating a change of the metadata for the current
  * radio source.
  *
  * If metadata is supported, this can be used to display the current title and
  * artist in the radio player UI.
  *
  * @param source   the current radio source
  * @param metadata the [[RadioMetadata]]
  * @param time     the time when this event was generated
  */
case class RadioMetadataEvent(source: RadioSource,
                              metadata: RadioMetadata,
                              override val time: LocalDateTime = LocalDateTime.now()) extends RadioEvent
